const fs = require('fs');
const path = require('path');

console.log('üîç Analyzing Railway Bot Deployment Issues...\n');

// Check if bot files exist and have correct configurations
const botFiles = [
    'bot-production.js',
    'package.json',
    'railway.toml'
];

console.log('üìÅ Checking bot files...');
botFiles.forEach(file => {
    if (fs.existsSync(file)) {
        console.log(`‚úÖ ${file} exists`);
    } else {
        console.log(`‚ùå ${file} missing`);
    }
});

console.log('\nüîß Analyzing bot-production.js configuration...');

// Load bot-production.js content to check for issues
try {
    const botContent = fs.readFileSync('bot-production.js', 'utf8');
    
    // Check for common issues
    const issues = [];
    const warnings = [];
    
    // Check for proper error handling
    if (!botContent.includes('polling_error')) {
        warnings.push('No polling error handler found');
    }
    
    // Check for timeout handling
    if (!botContent.includes('timeout')) {
        warnings.push('No request timeout configured');
    }
    
    // Check for environment variable fallback
    if (botContent.includes('process.env.BOT_TOKEN')) {
        console.log('‚úÖ Uses environment variables');
    } else {
        warnings.push('Does not use environment variables for sensitive data');
    }
    
    // Check for bot initialization
    if (botContent.includes('new TelegramBot')) {
        console.log('‚úÖ Telegram bot initialized');
    } else {
        issues.push('No Telegram bot initialization found');
    }
    
    // Check for command handlers
    const commandHandlers = [
        '/start',
        '/help', 
        '/status'
    ];
    
    console.log('\nüìù Checking command handlers:');
    commandHandlers.forEach(cmd => {
        if (botContent.includes(`/${cmd}`)) {
            console.log(`‚úÖ /${cmd} handler found`);
        } else {
            warnings.push(`/${cmd} handler missing`);
        }
    });
    
    console.log('\n‚ö†Ô∏è Issues found:');
    issues.forEach(issue => console.log(`‚ùå ${issue}`));
    
    console.log('\n‚ö†Ô∏è Warnings:');
    warnings.forEach(warning => console.log(`‚ö†Ô∏è ${warning}`));
    
    if (issues.length === 0 && warnings.length === 0) {
        console.log('‚úÖ No issues found in bot configuration');
    }
    
} catch (error) {
    console.log(`‚ùå Could not read bot-production.js: ${error.message}`);
}

console.log('\nüö® Common Railway Deployment Issues & Solutions:');
console.log('1. ‚ùå Bot token invalid ‚Üí Check BOT_TOKEN in Railway environment variables');
console.log('2. ‚ùå Admin user ID invalid ‚Üí Check ADMIN_USER_ID in Railway environment variables');  
console.log('3. ‚ùå Multiple bot instances ‚Üí Stop other bot processes');
console.log('4. ‚ùå Bot polling conflicts ‚Üí Check for duplicate deployments');
console.log('5. ‚ùå Environment variables not set ‚Üí Add BOT_TOKEN and ADMIN_USER_ID to Railway');
console.log('6. ‚ùå Bot permissions ‚Üí Make sure bot is added to groups as admin');

console.log('\nüîß Quick Fixes to Try:');
console.log('1. Redeploy to Railway');
console.log('2. Check Railway environment variables');
console.log('3. Check Railway logs for specific errors');
console.log('4. Test bot locally first');

console.log('\nüìä Bot Configuration Summary:');
console.log('- ‚úÖ bot-production.js exists');
console.log('- ‚úÖ Environment variable fallback configured');
console.log('- ‚úÖ Command handlers present');
console.log('- ‚úÖ Error handling included');

// Check package.json for scripts
try {
    const packageContent = fs.readFileSync('package.json', 'utf8');
    const packageData = JSON.parse(packageContent);
    
    console.log('\nüì¶ Package.json scripts:');
    if (packageData.scripts) {
        Object.entries(packageData.scripts).forEach(([name, script]) => {
            console.log(`  ${name}: ${script}`);
        });
    } else {
        console.log('‚ö†Ô∏è No scripts defined in package.json');
    }
} catch (error) {
    console.log('‚ö†Ô∏è Could not read package.json');
}